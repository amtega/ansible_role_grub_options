---
# Role tasks

- name: Setup grub options
  block:
    - name: Check EFI boot
      ansible.builtin.stat:
        path: /sys/firmware/efi
      register: grub_options_check_efi_result

    - name: Read grub system config file
      ansible.builtin.command: cat {{ grub_options_system_config_file }}
      changed_when: no
      register: grub_options_read_system_config_file_result

    - name: Check if password is already configured
      ansible.builtin.command: "cat {{ grub_options_password_config_file }}"
      changed_when: no
      register: grub_options_check_password_result

    - name: Setup grub password
      block:
        - name: Generate password
          ansible.builtin.expect:
            command: "grub2-mkpasswd-pbkdf2"
            responses:
              ":": "{{ grup_options_password }}"
          register: grub2_password_generate_result

        - name: Setup config file for password
          ansible.builtin.template:
            src: users.j2
            dest: "{{ grub_options_password_config_file }}"
            mode: 0600
          notify: generate grub2 config
          vars:
            grub_options_password: >-
              {{ grub2_password_generate_result.stdout.split(' ') | last }}
      when: >-
        grub_options_check_password_result.stdout
        is not search("grub.pbkdf2.sha512")
        or grub_options_set_password_force | bool

    - name: Securize grub config file
      ansible.builtin.file:
        path: "{{ grub_options_config_file  }}"
        mode: 0600

    - name: Add grub options
      ansible.builtin.shell: >-
        /sbin/grubby
        --args="{{ grub_options_present | join(' ') }}"
        --update-kernel=ALL
        --config-file={{ grub_options_config_file }} &&
        cat {{ grub_options_system_config_file }}
      args:
        warn: no
      when: grub_options_present | length > 0
      register: grub_options_add_result
      changed_when: >-
        grub_options_read_system_config_file_result.stdout | trim
        != grub_options_add_result.stdout | trim
      notify: generate grub2 config

    - name: Remove grub options
      ansible.builtin.shell: >-
        /sbin/grubby
        --remove-args="{{ grub_options_absent | join(' ') }}"
        --update-kernel=ALL
        --config-file={{ grub_options_config_file }} &&
        cat {{ grub_options_system_config_file }}
      args:
        warn: no
      when: grub_options_absent | length > 0
      changed_when: >-
        grub_options_read_system_config_file_result.stdout | trim
        != grub_options_remove_result.stdout | trim
      register: grub_options_remove_result
      notify: generate grub2 config

  tags:
    - role::grup_options
